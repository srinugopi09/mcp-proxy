"""
Configuration management CLI commands.
"""

from pathlib import Path
from typing import Optional

import typer
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.syntax import Syntax

from ...core.config import get_settings

app = typer.Typer(help="Configuration management commands")
console = Console()


@app.command("show")
def show_config(
    format: str = typer.Option("table", "--format", "-f", help="Output format (table, env)"),
):
    """üìã Show current configuration."""
    
    settings = get_settings()
    
    if format == "env":
        # Show as environment variables
        env_content = f"""# MCP Registry Configuration
MCP_APP_NAME="{settings.app_name}"
MCP_APP_VERSION="{settings.app_version}"
MCP_DEBUG={str(settings.debug).lower()}

# API Server
MCP_API_HOST="{settings.api_host}"
MCP_API_PORT={settings.api_port}
MCP_API_WORKERS={settings.api_workers}

# Database
MCP_DATABASE_URL="{settings.database_url}"
MCP_DATABASE_POOL_SIZE={settings.database_pool_size}
MCP_DATABASE_ECHO={str(settings.database_echo).lower()}

# Discovery
MCP_DISCOVERY_TIMEOUT={settings.discovery_timeout}
MCP_DISCOVERY_CACHE_TTL={settings.discovery_cache_ttl}

# Security
MCP_SECRET_KEY="{settings.secret_key}"
MCP_ALLOWED_HOSTS={','.join(settings.allowed_hosts)}

# Monitoring
MCP_LOG_LEVEL="{settings.log_level}"
MCP_ENABLE_METRICS={str(settings.enable_metrics).lower()}
"""
        
        syntax = Syntax(env_content, "bash", theme="monokai", line_numbers=True)
        console.print(syntax)
        
    else:
        # Show as table
        table = Table(title="‚öôÔ∏è  Current Configuration")
        table.add_column("Setting", style="cyan", no_wrap=True)
        table.add_column("Value", style="green")
        table.add_column("Description", style="yellow")
        
        # Application settings
        table.add_row("[bold]Application[/bold]", "", "")
        table.add_row("app_name", settings.app_name, "Application name")
        table.add_row("app_version", settings.app_version, "Application version")
        table.add_row("debug", str(settings.debug), "Debug mode")
        
        # API settings
        table.add_row("", "", "")
        table.add_row("[bold]API Server[/bold]", "", "")
        table.add_row("api_host", settings.api_host, "API server host")
        table.add_row("api_port", str(settings.api_port), "API server port")
        table.add_row("api_workers", str(settings.api_workers), "Number of workers")
        
        # Database settings
        table.add_row("", "", "")
        table.add_row("[bold]Database[/bold]", "", "")
        table.add_row("database_url", settings.database_url, "Database connection URL")
        table.add_row("database_pool_size", str(settings.database_pool_size), "Connection pool size")
        table.add_row("database_echo", str(settings.database_echo), "Echo SQL queries")
        
        # Discovery settings
        table.add_row("", "", "")
        table.add_row("[bold]Discovery[/bold]", "", "")
        table.add_row("discovery_timeout", str(settings.discovery_timeout), "Discovery timeout (seconds)")
        table.add_row("discovery_cache_ttl", str(settings.discovery_cache_ttl), "Cache TTL (seconds)")
        
        # Security settings
        table.add_row("", "", "")
        table.add_row("[bold]Security[/bold]", "", "")
        table.add_row("secret_key", "***" if settings.secret_key != "dev-secret-key-change-in-production" else settings.secret_key, "Secret key")
        table.add_row("allowed_hosts", ",".join(settings.allowed_hosts), "Allowed hosts")
        
        # Monitoring settings
        table.add_row("", "", "")
        table.add_row("[bold]Monitoring[/bold]", "", "")
        table.add_row("log_level", settings.log_level, "Logging level")
        table.add_row("enable_metrics", str(settings.enable_metrics), "Enable metrics collection")
        
        console.print(table)


@app.command("create")
def create_config(
    output: str = typer.Option(".env", "--output", "-o", help="Output file path"),
    force: bool = typer.Option(False, "--force", "-f", help="Overwrite existing file"),
):
    """üìù Create a configuration file."""
    
    output_path = Path(output)
    
    if output_path.exists() and not force:
        console.print(f"[yellow]Configuration file '{output}' already exists. Use --force to overwrite.[/yellow]")
        return
    
    settings = get_settings()
    
    config_content = f"""# MCP Registry Configuration
# Generated by mcp-registry config create

# Application Settings
MCP_APP_NAME="{settings.app_name}"
MCP_DEBUG=false

# API Server Settings
MCP_API_HOST=0.0.0.0
MCP_API_PORT=8080
MCP_API_WORKERS=1

# Database Settings
MCP_DATABASE_URL=sqlite+aiosqlite:///./mcp_registry.db
MCP_DATABASE_POOL_SIZE=5
MCP_DATABASE_ECHO=false

# Discovery Settings
MCP_DISCOVERY_TIMEOUT=30
MCP_DISCOVERY_CACHE_TTL=3600
MCP_DISCOVERY_MAX_CONCURRENT=10

# Security Settings (CHANGE IN PRODUCTION!)
MCP_SECRET_KEY=your-secret-key-here
MCP_ALLOWED_HOSTS=*

# Monitoring Settings
MCP_LOG_LEVEL=INFO
MCP_ENABLE_METRICS=true
MCP_METRICS_PORT=9090

# Rate Limiting
MCP_RATE_LIMIT_REQUESTS=100
MCP_RATE_LIMIT_WINDOW=60
"""
    
    try:
        output_path.write_text(config_content)
        
        success_panel = Panel.fit(
            f"[bold green]‚úÖ Configuration file created![/bold green]\n\n"
            f"[cyan]File:[/cyan] {output_path.absolute()}\n"
            f"[cyan]Format:[/cyan] Environment variables\n\n"
            f"[yellow]Next steps:[/yellow]\n"
            f"1. Edit the file to customize settings\n"
            f"2. Set MCP_SECRET_KEY to a secure value\n"
            f"3. Restart the application to apply changes\n\n"
            f"[dim]Use 'mcp-registry config show' to view current settings[/dim]",
            title="üìù Configuration Created",
            border_style="green"
        )
        console.print(success_panel)
        
    except Exception as e:
        console.print(f"[red]‚ùå Failed to create configuration file: {e}[/red]")
        raise typer.Exit(1)


@app.command("validate")
def validate_config():
    """‚úÖ Validate current configuration."""
    
    try:
        settings = get_settings()
        
        issues = []
        warnings = []
        
        # Check critical settings
        if settings.secret_key == "dev-secret-key-change-in-production":
            issues.append("Secret key is using default value (security risk)")
        
        if settings.debug and settings.api_host == "0.0.0.0":
            warnings.append("Debug mode enabled with public host (development only)")
        
        if settings.database_url.startswith("sqlite") and settings.api_workers > 1:
            warnings.append("SQLite with multiple workers may cause issues")
        
        # Check database URL format
        if not any(settings.database_url.startswith(prefix) for prefix in ["sqlite", "postgresql", "mysql"]):
            issues.append("Invalid database URL format")
        
        # Create validation report
        if issues:
            console.print("[red]‚ùå Configuration validation failed:[/red]")
            for issue in issues:
                console.print(f"  [red]‚Ä¢ {issue}[/red]")
        else:
            console.print("[green]‚úÖ Configuration validation passed[/green]")
        
        if warnings:
            console.print("\n[yellow]‚ö†Ô∏è  Warnings:[/yellow]")
            for warning in warnings:
                console.print(f"  [yellow]‚Ä¢ {warning}[/yellow]")
        
        if not issues and not warnings:
            console.print("\n[green]üéâ Configuration looks good![/green]")
        
        if issues:
            raise typer.Exit(1)
            
    except Exception as e:
        console.print(f"[red]‚ùå Configuration validation error: {e}[/red]")
        raise typer.Exit(1)